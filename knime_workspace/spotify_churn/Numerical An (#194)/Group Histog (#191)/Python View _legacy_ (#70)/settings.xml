<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://www.knime.org/2008/09/XMLConfig" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.knime.org/2008/09/XMLConfig http://www.knime.org/XMLConfig_2008_09.xsd" key="settings.xml">
    <entry key="node_file" type="xstring" value="settings.xml"/>
    <config key="flow_stack"/>
    <config key="internal_node_subsettings">
        <entry key="memory_policy" type="xstring" value="CacheSmallInMemory"/>
    </config>
    <config key="model">
        <entry key="sourceCode" type="xstring" value="import numpy as np%%00010import pandas as pd%%00010import seaborn as sns%%00010import plotly.graph_objects as go%%00010import plotly.express as px%%00010from io import BytesIO%%00010import plotly.io as pio%%00010import kaleido%%00010import matplotlib.pyplot as plt%%00010from typing import Optional, Tuple%%00010%%00010# 1. Lee la tabla de datos de KNIME y conviértela a un DataFrame de pandas%%00010df = pd.DataFrame(input_table)%%00010%%00010# 2. ...%%00010numerical_variable = flow_variables['numerical_variable']%%00010categorical_variable = flow_variables['categorical_variable']%%00010%%00010log_scale = 1 if flow_variables['log_scale']==1 else 0%%00010%%00010# %%00010def plot_group_boxplot(%%00010    df: pd.DataFrame,%%00010    categorical_variable: str,%%00010    numerical_variable: str,%%00010    figsize: Optional[Tuple[float, float]] = None,%%00010    dpi: int = 150%%00010) -&gt; plt.Figure:%%00010    &quot;&quot;&quot;%%00010    Representa la distribución de una variable numérica por grupo categórico%%00010    mediante boxplots verticales. El tamaño del gráfico se ajusta al número de categorías.%%00010%%00010    Parámetros%%00010    ----------%%00010    df : pd.DataFrame%%00010        DataFrame con los datos.%%00010    categorical_variable : str%%00010        Nombre de la variable categórica.%%00010    numerical_variable : str%%00010        Nombre de la variable numérica.%%00010    figsize : tuple, opcional%%00010        Tamaño de la figura. Si no se indica, se calcula automáticamente.%%00010    dpi : int%%00010        Resolución de la figura.%%00010    &quot;&quot;&quot;%%00010%%00010    # Contar categorías únicas%%00010    n_cats = df[categorical_variable].nunique()%%00010%%00010    # Calcular tamaño dinámico%%00010    if figsize is None:%%00010        width = 3 + 1.25 * n_cats%%00010        height = 5%%00010        figsize = (width, height)%%00010%%00010    # Crear figura%%00010    fig, ax = plt.subplots(figsize=figsize, dpi=dpi)%%00010%%00010    # Boxplot vertical%%00010    sns.boxplot(%%00010        data=df,%%00010        x=categorical_variable,%%00010        y=numerical_variable,%%00010        ax=ax,%%00010        palette=&quot;Spectral&quot;,%%00010        width=0.6,%%00010        fliersize=3,%%00010        linewidth=1%%00010    )%%00010%%00010    # Personalización%%00010    ax.set_title(%%00010        f&quot;Distribución de {numerical_variable} por {categorical_variable}&quot;,%%00010        fontsize=13,%%00010        pad=10%%00010    )%%00010    ax.set_xlabel(categorical_variable, fontsize=13)%%00010    ax.set_ylabel(numerical_variable, fontsize=13)%%00010    ax.tick_params(axis='both', labelsize=12)%%00010    sns.despine()%%00010%%00010    plt.tight_layout()%%00010    return fig%%00010%%00010    %%00010%%00010# 3. Genera el gráfico%%00010fig = plot_group_boxplot(df, categorical_variable, numerical_variable)%%00010%%00010# 4. Crea el buffer en memoria%%00010buffer = BytesIO()%%00010%%00010# 5. Guarda el gráfico en el buffer en formato SVG%%00010fig.savefig(buffer, format='svg')%%00010%%00010# 6. Obtiene el contenido del buffer como un valor de bytes%%00010output_image = buffer.getvalue()%%00010"/>
        <entry key="rowLimit" type="xint" value="1000"/>
        <entry key="convertMissingToPython" type="xboolean" value="false"/>
        <entry key="convertMissingFromPython" type="xboolean" value="false"/>
        <entry key="sentinelOption" type="xstring" value="MIN_VAL"/>
        <entry key="sentinelValue" type="xint" value="0"/>
        <entry key="chunkSize" type="xint" value="500000"/>
        <entry key="pythonVersionOption" type="xstring" value="python3"/>
        <entry key="python2Command" type="xstring" value=""/>
        <entry key="python3Command" type="xstring" value=""/>
    </config>
    <config key="nodeAnnotation">
        <entry key="text" type="xstring" value="Group Boxplot"/>
        <entry key="contentType" type="xstring" value="text/plain"/>
        <entry key="bgcolor" type="xint" value="16777215"/>
        <entry key="x-coordinate" type="xint" value="-2620"/>
        <entry key="y-coordinate" type="xint" value="81"/>
        <entry key="width" type="xint" value="152"/>
        <entry key="height" type="xint" value="18"/>
        <entry key="alignment" type="xstring" value="CENTER"/>
        <entry key="borderSize" type="xint" value="0"/>
        <entry key="borderColor" type="xint" value="0"/>
        <entry key="defFontSize" type="xint" value="-1"/>
        <entry key="annotation-version" type="xint" value="20230412"/>
        <config key="styles"/>
    </config>
    <entry key="customDescription" type="xstring" isnull="true" value=""/>
    <entry key="state" type="xstring" value="EXECUTED"/>
    <entry key="factory" type="xstring" value="org.knime.python2.nodes.view.Python2ViewNodeFactory"/>
    <entry key="node-name" type="xstring" value="Python View (legacy)"/>
    <entry key="node-bundle-name" type="xstring" value="KNIME Python nodes"/>
    <entry key="node-bundle-symbolic-name" type="xstring" value="org.knime.python2.nodes"/>
    <entry key="node-bundle-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
    <entry key="node-bundle-version" type="xstring" value="5.6.0.v202507151411"/>
    <entry key="node-feature-name" type="xstring" value="KNIME Python 2 Integration (legacy)"/>
    <entry key="node-feature-symbolic-name" type="xstring" value="org.knime.features.python2.feature.group"/>
    <entry key="node-feature-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
    <entry key="node-feature-version" type="xstring" value="5.6.0.v202507151411"/>
    <config key="factory_settings"/>
    <entry key="name" type="xstring" value="Python View (legacy)"/>
    <entry key="hasContent" type="xboolean" value="true"/>
    <entry key="isInactive" type="xboolean" value="false"/>
    <config key="ports">
        <config key="port_1">
            <entry key="index" type="xint" value="1"/>
            <entry key="port_spec_class" type="xstring" value="org.knime.core.node.port.image.ImagePortObjectSpec"/>
            <entry key="port_object_class" type="xstring" value="org.knime.core.node.port.image.ImagePortObject"/>
            <entry key="port_object_summary" type="xstring" value="SVG 528 x 480"/>
            <entry key="port_spec_location" type="xstring" value="spec/spec.zip"/>
            <entry key="port_object_location" type="xstring" value="object/portobject.zip"/>
            <entry key="port_dir_location" type="xstring" value="port_1"/>
        </config>
    </config>
    <config key="filestores">
        <entry key="file_store_location" type="xstring" isnull="true" value=""/>
        <entry key="file_store_id" type="xstring" value="b23b42cf-798d-4b24-9e02-89312e46403e"/>
    </config>
</config>
